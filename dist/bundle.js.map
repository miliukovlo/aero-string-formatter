{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://aero-string-formatter/webpack/universalModuleDefinition","webpack://aero-string-formatter/./src/index.ts","webpack://aero-string-formatter/./src/formatNumberToRoman.ts","webpack://aero-string-formatter/./src/formatNumberToPriceString.ts","webpack://aero-string-formatter/./src/formatNumberWithSpaces.ts","webpack://aero-string-formatter/./src/formatDateToString.ts","webpack://aero-string-formatter/./src/formatNumberToPriceIntl.ts","webpack://aero-string-formatter/./src/getNoun.ts","webpack://aero-string-formatter/./src/formatFloatReplaceDot.ts","webpack://aero-string-formatter/./src/formatLocalPhoneNumber.ts","webpack://aero-string-formatter/webpack/bootstrap","webpack://aero-string-formatter/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, () => {\nreturn ","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./formatFloatReplaceDot\"), exports);\r\n__exportStar(require(\"./formatDateToString\"), exports);\r\n__exportStar(require(\"./formatLocalPhoneNumber\"), exports);\r\n__exportStar(require(\"./formatNumberToPriceString\"), exports);\r\n__exportStar(require(\"./getNoun\"), exports);\r\n__exportStar(require(\"./formatNumberToPriceIntl\"), exports);\r\n__exportStar(require(\"./formatNumberToRoman\"), exports);\r\n__exportStar(require(\"./formatNumberWithSpaces\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatNumberToRoman = void 0;\r\n/**\r\n * Конвертирует арабское число в римскую цифру\r\n *\r\n * @param {number} number - Число для конвертации (должно быть в диапазоне 1-3999)\r\n * @returns {string} Строковое представление числа в римской нотации\r\n *\r\n * @throws {Error} Если число выходит за допустимый диапазон (меньше 1 или больше 3999)\r\n *\r\n * @example\r\n * // Конвертация простых чисел\r\n * numberFormatterToRoman(3); // \"III\"\r\n * numberFormatterToRoman(10); // \"X\"\r\n *\r\n * @example\r\n * // Конвертация чисел с комбинациями\r\n * numberFormatterToRoman(4); // \"IV\"\r\n * numberFormatterToRoman(9); // \"IX\"\r\n * numberFormatterToRoman(14); // \"XIV\"\r\n *\r\n * @example\r\n * // Конвертация больших чисел\r\n * numberFormatterToRoman(1987); // \"MCMLXXXVII\"\r\n * numberFormatterToRoman(2023); // \"MMXXIII\"\r\n *\r\n * @example\r\n * // Обработка граничных значений\r\n * numberFormatterToRoman(1); // \"I\"\r\n * numberFormatterToRoman(3999); // \"MMMCMXCIX\"\r\n */\r\nconst formatNumberToRoman = (number) => {\r\n    if (number < 1 || number > 3999) {\r\n        throw new Error('Число должно быть в диапазоне от 1 до 3999');\r\n    }\r\n    return [\r\n        { value: 1000, char: 'M' },\r\n        { value: 900, char: 'CM' },\r\n        { value: 500, char: 'D' },\r\n        { value: 400, char: 'CD' },\r\n        { value: 100, char: 'C' },\r\n        { value: 90, char: 'XC' },\r\n        { value: 50, char: 'L' },\r\n        { value: 40, char: 'XL' },\r\n        { value: 10, char: 'X' },\r\n        { value: 9, char: 'IX' },\r\n        { value: 5, char: 'V' },\r\n        { value: 4, char: 'IV' },\r\n        { value: 1, char: 'I' },\r\n    ].reduce((result, currentValue) => {\r\n        while (number >= currentValue.value) {\r\n            result += currentValue.char;\r\n            number -= currentValue.value;\r\n        }\r\n        return result;\r\n    }, '');\r\n};\r\nexports.formatNumberToRoman = formatNumberToRoman;\r\n","\"use strict\";\r\n/**\r\n * Функция для форматирования числа в строку с 3 знаками и указанием системы единиц\r\n *\r\n \r\n *\r\n * @param {string | number} value - строка, либо число, которое будет отформатировано\r\n * @returns {string} - вернется число с 3 знаками и указанием системы единиц\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatNumberToPriceString = void 0;\r\nconst formatNumberToPriceString = (value) => {\r\n    const num = Number(value);\r\n    if (num >= 1000000) {\r\n        const millions = num / 1000000;\r\n        const formatted = millions % 1 === 0 ? millions : millions.toFixed(1);\r\n        return `${formatted.toString().replace('.', ',')} млн. ₽`;\r\n    }\r\n    else if (num >= 1000) {\r\n        const thousands = num / 1000;\r\n        const formatted = thousands % 1 === 0 ? thousands : thousands.toFixed(1);\r\n        return `${formatted.toString().replace('.', ',')} тыс. ₽`;\r\n    }\r\n    return `${num.toLocaleString('ru-RU')} ₽`;\r\n};\r\nexports.formatNumberToPriceString = formatNumberToPriceString;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatNumberWithSpaces = void 0;\r\n/**\r\n * Форматирует цену, добавляя разделители тысяч для лучшей читаемости\r\n *\r\n * @param {string | number | undefined} price - Цена для форматирования (может быть строкой, числом или undefined)\r\n * @param {string} [thousandsSeparator=' '] - Разделитель тысяч (по умолчанию пробел)\r\n * @param {string} [decimalSeparator=','] - Разделитель дробной части (по умолчанию запятая)\r\n * @param {number} [decimalDigits=0] - Количество знаков после запятой (по умолчанию 0)\r\n * @returns {string} Отформатированная строка цены\r\n *\r\n * @example\r\n * // Стандартное форматирование\r\n * priceFormatter(1234567); // \"1 234 567\"\r\n *\r\n * @example\r\n * // Форматирование с кастомными разделителями\r\n * priceFormatter(1234567.89, '.', ',', 2); // \"1.234.567,89\"\r\n *\r\n * @example\r\n * // Обработка undefined и строковых значений\r\n * priceFormatter('9876543'); // \"9 876 543\"\r\n * priceFormatter(undefined); // \"0\"\r\n *\r\n * @example\r\n * // Форматирование с дробной частью\r\n * priceFormatter(1234.56, ' ', ',', 2); // \"1 234,56\"\r\n */\r\nconst formatNumberWithSpaces = (price, thousandsSeparator = ' ', decimalSeparator = ',', decimalDigits = 0) => {\r\n    // Обработка undefined и нечисловых строк\r\n    const numericValue = Number(price || 0);\r\n    // Округление и фиксация количества знаков после запятой\r\n    const roundedValue = decimalDigits > 0\r\n        ? numericValue.toFixed(decimalDigits)\r\n        : Math.round(numericValue).toString();\r\n    // Разделение целой и дробной частей\r\n    const [integerPart, decimalPart] = roundedValue.split('.');\r\n    // Форматирование целой части с разделителями\r\n    const formattedInteger = integerPart\r\n        .split('')\r\n        .reverse()\r\n        .map((item, i) => (i % 3 === 0 && i !== 0 ? `${item}${thousandsSeparator}` : item))\r\n        .reverse()\r\n        .join('')\r\n        .trim();\r\n    // Добавление дробной части при необходимости\r\n    return decimalDigits > 0 && decimalPart\r\n        ? `${formattedInteger}${decimalSeparator}${decimalPart}`\r\n        : formattedInteger;\r\n};\r\nexports.formatNumberWithSpaces = formatNumberWithSpaces;\r\n","\"use strict\";\r\n/**\r\n * Функция для форматирования даты\r\n *\r\n \r\n *\r\n * @param {Date} date - Дата для форматирования, тип данных Date\r\n * @returns {string} - вернется дата в виде строки\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatDateToString = void 0;\r\nconst formatDateToString = (date) => {\r\n    const formatter = new Intl.DateTimeFormat('ru-RU', {\r\n        day: '2-digit',\r\n        month: 'long',\r\n        year: 'numeric',\r\n    });\r\n    return formatter.format(date);\r\n};\r\nexports.formatDateToString = formatDateToString;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatNumberToPriceIntl = void 0;\r\n/**\r\n * Форматирует число в денежный формат согласно локали и валюте\r\n *\r\n * @param {number} value - Числовое значение для форматирования\r\n * @param {string} [country='ru-RU'] - Локаль для форматирования (по умолчанию 'ru-RU')\r\n * @param {string} [currency='RUB'] - Валюта для отображения (код валюты по ISO 4217, по умолчанию 'RUB')\r\n * @param {number} [minFractionDigits=0] - Минимальное количество цифр после запятой (по умолчанию 0)\r\n * @param {number} [maxFractionDigits=0] - Максимальное количество цифр после запятой (по умолчанию 0)\r\n * @returns {string} Отформатированная денежная строка\r\n *\r\n * @example\r\n * // Форматирование рублей (по умолчанию)\r\n * numberFormatterToPrice(1500); // \"1 500 ₽\"\r\n *\r\n * @example\r\n * // Форматирование долларов США\r\n * numberFormatterToPrice(1500, 'en-US', 'USD'); // \"$1,500\"\r\n *\r\n * @example\r\n * // Форматирование евро с двумя знаками после запятой\r\n * numberFormatterToPrice(1500.5, 'de-DE', 'EUR', 2, 2); // \"1.500,50 €\"\r\n */\r\nconst formatNumberToPriceIntl = (value, country = 'ru-RU', currency = 'RUB', minFractionDigits = 0, maxFractionDigits = 0) => {\r\n    return new Intl.NumberFormat(country, {\r\n        style: 'currency',\r\n        currency: currency,\r\n        minimumFractionDigits: minFractionDigits,\r\n        maximumFractionDigits: maxFractionDigits,\r\n    }).format(value);\r\n};\r\nexports.formatNumberToPriceIntl = formatNumberToPriceIntl;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getNoun = void 0;\r\n/**\r\n * Возвращает правильное окончание\r\n *\r\n \r\n *\r\n * @param {number} amount - Число, которое будет подставлено\r\n * @param {string} singular - Слово в именительном падеже (Например, есть 'слон')\r\n * @param {string} binary - Слово в дательном падеже (Например, нет 'слона')\r\n * @param {string} multi - Слово множество(Например, 'слонов')\r\n * @returns {string} - вернет строку с указанием корректного количества и числа с окончанием\r\n *\r\n */\r\nconst getNoun = (amount, singular, binary, multi) => {\r\n    let n = Math.abs(amount);\r\n    n %= 100;\r\n    if (n >= 5 && n <= 20) {\r\n        return `${amount} ${multi}`;\r\n    }\r\n    n %= 10;\r\n    if (n === 1) {\r\n        return `${amount} ${singular}`;\r\n    }\r\n    if (n >= 2 && n <= 4) {\r\n        return `${amount} ${binary}`;\r\n    }\r\n    return `${amount} ${multi}`;\r\n};\r\nexports.getNoun = getNoun;\r\n","\"use strict\";\r\n/**\r\n * Функция для чисел типа float, заменяет точки на запятые\r\n *\r\n \r\n *\r\n * @param {number} value - Число, которое будет подставлено\r\n * @returns {string} - отформатированная строка\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatFloatReplaceDot = void 0;\r\nconst formatFloatReplaceDot = (value) => {\r\n    return value.toString().replace('.', ',');\r\n};\r\nexports.formatFloatReplaceDot = formatFloatReplaceDot;\r\n","\"use strict\";\r\n/**\r\n * Функция для форматирования номера телефона\r\n *\r\n \r\n *\r\n * @param {string | number} phoneNumber - строка, либо число, которое будет отформатировано\r\n * @returns {string} - возвращает отформатированную строку номера телефона\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatLocalPhoneNumber = void 0;\r\nconst formatLocalPhoneNumber = (phoneNumber) => {\r\n    let cleanedPhoneNumber = '';\r\n    // Чистим от лишних символов и преобразуем в строку\r\n    if (typeof phoneNumber === 'number') {\r\n        cleanedPhoneNumber = phoneNumber.toString().replace(/[^\\d+]/g, '');\r\n    }\r\n    else {\r\n        cleanedPhoneNumber = phoneNumber.replace(/[^\\d+]/g, '');\r\n    }\r\n    // Форматируем номер телефона для +7\r\n    if (cleanedPhoneNumber.startsWith('+7')) {\r\n        return `+7 (${cleanedPhoneNumber.slice(2, 6)}) ${cleanedPhoneNumber.slice(6, 8)}-${cleanedPhoneNumber.slice(8, 10)}-${cleanedPhoneNumber.slice(10, 12)}`;\r\n        // Форматируем номер телефона для 8\r\n    }\r\n    else if (cleanedPhoneNumber.startsWith('8')) {\r\n        return `8 (${cleanedPhoneNumber.slice(1, 4)}) ${cleanedPhoneNumber.slice(4, 7)}-${cleanedPhoneNumber.slice(7, 9)}-${cleanedPhoneNumber.slice(9, 11)}`;\r\n        // Возвращаем номер телефона без изменений\r\n    }\r\n    else {\r\n        return cleanedPhoneNumber;\r\n    }\r\n};\r\nexports.formatLocalPhoneNumber = formatLocalPhoneNumber;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["root","factory","exports","module","define","amd","a","i","this","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__exportStar","p","prototype","hasOwnProperty","call","value","formatNumberToRoman","number","Error","char","reduce","result","currentValue","formatNumberToPriceString","num","Number","millions","toFixed","toString","replace","thousands","toLocaleString","formatNumberWithSpaces","price","thousandsSeparator","decimalSeparator","decimalDigits","numericValue","roundedValue","Math","round","integerPart","decimalPart","split","formattedInteger","reverse","map","item","join","trim","formatDateToString","date","Intl","DateTimeFormat","day","month","year","format","formatNumberToPriceIntl","country","currency","minFractionDigits","maxFractionDigits","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","getNoun","amount","singular","binary","multi","n","abs","formatFloatReplaceDot","formatLocalPhoneNumber","phoneNumber","cleanedPhoneNumber","startsWith","slice","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}